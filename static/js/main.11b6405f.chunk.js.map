{"version":3,"sources":["images/2-Dice-Icon.svg","images/play-circle.svg","images/pause-circle.svg","images/refresh-cw.svg","images/homemade-dice.svg","images/arrow-up-circle.svg","components/Column.tsx","components/Container.tsx","components/Roll.tsx","components/Arrows.tsx","utils/util-functions.tsx","components/TimerWrapper.tsx","App.tsx","index.tsx"],"names":["module","exports","Column","id","divStyle","style","Container","onAnimationStart","onAnimationEnd","colArray","children","console","log","className","map","element","index","toString","backgroundColor","color","borderLeft","borderRight","length","key","Roll","handleClick","onClick","src","Dice","alt","height","width","ArrowComponent","Arrow","getRandomArbitraryFloor","min","max","Math","floor","random","TimerWrapper","Array","fill","initialTime","direction","startImmediately","timeToUpdate","start","pause","reset","Fragment","display","Minutes","Seconds","formatValue","value","Play","Pause","resetTimer","Reset","colorArray","arr","i","curGtc","getComputedStyle","document","documentElement","getPropertyValue","setProperty","curColor","spcArrObj","push","a","j","shuffle","randArray","App","useState","showTimer","setShowTimer","showDice","setShowDice","roll","curGtcArr","split","clone","clone2","clone3","clone4","clone5","join","setupCSSAnimationVariables","colContainer","getElementById","classList","remove","offsetWidth","add","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.11b6405f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/2-Dice-Icon.04278970.svg\";","module.exports = __webpack_public_path__ + \"static/media/play-circle.63d6952e.svg\";","module.exports = __webpack_public_path__ + \"static/media/pause-circle.a4eb8326.svg\";","module.exports = __webpack_public_path__ + \"static/media/refresh-cw.8b81b4b8.svg\";","module.exports = __webpack_public_path__ + \"static/media/homemade-dice.876e4448.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow-up-circle.3e0ba75a.svg\";","import React from \"react\";\r\n\r\ntype ColumnProps = {\r\n  id: string,\r\n  divStyle: {\r\n    backgroundColor: string;\r\n    borderLeft: string;\r\n    borderRight: string;\r\n  };\r\n};\r\n\r\nexport const Column = ({ id, divStyle }: ColumnProps) => {\r\n  return <div id = {id} style={divStyle}></div>;\r\n};\r\n","import React, { FunctionComponent } from \"react\";\r\nimport { Column } from \"./Column\";\r\n\r\ntype arrObj = {\r\n  index: number;\r\n  color: string;\r\n};\r\n\r\ntype ContainerProps = {\r\n  onAnimationEnd: (event: React.AnimationEvent<HTMLDivElement>) => void;\r\n  onAnimationStart: (event: React.AnimationEvent<HTMLDivElement>) => void;\r\n  colArray: arrObj[];\r\n};\r\n\r\nexport const Container: FunctionComponent<ContainerProps> = ({\r\n  onAnimationStart,\r\n  onAnimationEnd,\r\n  colArray,\r\n  children,\r\n}) => {\r\n  console.log(\"REDOING COLOR ARRAY\");\r\n\r\n  return (\r\n    <div\r\n      id=\"col-container\"\r\n      className=\"container\"\r\n      onAnimationStart={onAnimationStart}\r\n      onAnimationEnd={onAnimationEnd}\r\n    >\r\n      {colArray.map((element) => (\r\n        <Column\r\n          id={element.index.toString()}\r\n          divStyle={{\r\n            backgroundColor: element.color,\r\n            borderLeft: element.index === 0 ? \"none\" : \"1px dotted black\",\r\n            borderRight:\r\n              element.index === colArray.length - 1\r\n                ? \"none\"\r\n                : \"1px dotted black\",\r\n          }}\r\n          key={element.index}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Dice from \"../images/2-Dice-Icon.svg\";\r\n\r\n\r\ntype RollProps = {\r\n    handleClick: (event: React.MouseEvent<HTMLButtonElement>) => void;\r\n}\r\n\r\nexport const Roll = ({handleClick}: RollProps) => (\r\n  <button className=\"roll-button\" onClick={handleClick}>\r\n    <img src={Dice} alt=\"Roll\" style={{ height: 320, width: 320 }}></img>\r\n  </button>\r\n);\r\n","import React from \"react\";\r\nimport Arrow from \"../images/arrow-up-circle.svg\";\r\n\r\nexport const ArrowComponent = () => {\r\n  return <img src={Arrow} alt=\"Arrow\" style={{ height: 24, width: 24 }}></img>;\r\n};\r\n","export function getRandomArbitraryFloor(min: number, max: number) {\r\n  return Math.floor(Math.random() * (max - min) + min);\r\n}\r\n\r\nexport function shuffle(a: Array<any>) {\r\n  for (let i = a.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [a[i], a[j]] = [a[j], a[i]];\r\n  }\r\n  return a;\r\n}\r\n\r\nexport function getRandomArbitrary(min: number, max: number) {\r\n    return Math.random() * (max - min) + min;\r\n  }\r\n\r\n// export {};\r\n","import React, { FunctionComponent } from \"react\";\r\nimport Timer from \"react-compound-timer\";\r\nimport { TimerControls } from \"react-compound-timer\";\r\nimport Play from \"../images/play-circle.svg\";\r\nimport Pause from \"../images/pause-circle.svg\";\r\nimport Reset from \"../images/refresh-cw.svg\";\r\nimport Dice from \"../images/homemade-dice.svg\";\r\nimport { ArrowComponent } from \"../components/Arrows\";\r\nimport { getRandomArbitraryFloor } from \"../utils/util-functions\"\r\n\r\n\r\n\r\ntype TimerWrapperProps = {\r\n  handleClick: (event: React.MouseEvent<HTMLButtonElement>) => void;\r\n};\r\n\r\nexport const TimerWrapper: FunctionComponent<TimerWrapperProps> = ({\r\n  handleClick,\r\n  children,\r\n}) => {\r\n\r\n  const resetTimer = (reset: Function, pause: Function) => {\r\n    pause();\r\n    reset();\r\n  }\r\n\r\n  return (\r\n    <div className=\"timer\">\r\n      <div className=\"arrow-container\">\r\n        {Array(getRandomArbitraryFloor(1, 4)).fill(<ArrowComponent />)}\r\n      </div>\r\n\r\n      <Timer\r\n        initialTime={60000}\r\n        direction=\"backward\"\r\n        startImmediately={false}\r\n        timeToUpdate={100}\r\n      >\r\n        {({ start, pause, reset }: TimerControls) => (\r\n          <React.Fragment>\r\n            <div style={{ display: \"inline-block\", height: \"max-content\" }}>\r\n              <Timer.Minutes />:\r\n              <Timer.Seconds\r\n                formatValue={(value: number) => {\r\n                  if (value > 10) {\r\n                    return value.toString();\r\n                  } else {\r\n                    return `0${value}`;\r\n                  }\r\n                }}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"button-container\">\r\n              <button onClick={start}>\r\n                <img src={Play} alt=\"Start\"></img>\r\n              </button>\r\n              <button onClick={pause}>\r\n                <img src={Pause} alt=\"Pause\"></img>\r\n              </button>\r\n              <button onClick={() => resetTimer(reset, pause)}>\r\n                <img src={Reset} alt=\"Reset\"></img>\r\n              </button>\r\n              <button onClick={handleClick}>\r\n                <img\r\n                  src={Dice}\r\n                  alt=\"Roll\"\r\n                  style={{ height: 24, width: 24 }}\r\n                ></img>\r\n              </button>\r\n            </div>\r\n          </React.Fragment>\r\n        )}\r\n      </Timer>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport { Container } from \"./components/Container\";\r\nimport { Roll } from \"./components/Roll\";\r\nimport { TimerWrapper } from \"./components/TimerWrapper\";\r\nimport {\r\n  shuffle,\r\n  getRandomArbitraryFloor,\r\n  getRandomArbitrary,\r\n} from \"../src/utils/util-functions\";\r\n\r\n/*\r\n * setupCSSAnimationVariables sets up 5 CSS variables that each hold\r\n * a grid-template-column configuration. In each variable, one of the columns\r\n * is \"ballooned\" so that during animation  that column widens to take up\r\n * a larger proportion of the page. \r\n*/\r\n\r\nfunction setupCSSAnimationVariables() {\r\n  let curGtc = getComputedStyle(document.documentElement) //get the current value of the css variable\r\n    .getPropertyValue(\"--gtc-random\");\r\n\r\n  let curGtcArr = curGtc.split(\" \"); //transform the css variable into an array of values\r\n  let clone = [...curGtcArr];\r\n  let clone2 = [...curGtcArr];\r\n  let clone3 = [...curGtcArr];\r\n  let clone4 = [...curGtcArr];\r\n  let clone5 = [...curGtcArr];\r\n\r\n  clone[\r\n    getRandomArbitraryFloor(1, curGtcArr.length)\r\n  ] = `${getRandomArbitraryFloor(150, 600)}fr`;\r\n\r\n  document.documentElement.style.setProperty(\"--gtc-animate\", clone.join(\" \"));\r\n\r\n  clone2[\r\n    getRandomArbitraryFloor(1, curGtcArr.length)\r\n  ] = `${getRandomArbitraryFloor(150, 600)}fr`;\r\n\r\n  document.documentElement.style.setProperty(\r\n    \"--gtc-animate2\",\r\n    clone2.join(\" \")\r\n  );\r\n\r\n  clone3[\r\n    getRandomArbitraryFloor(1, curGtcArr.length)\r\n  ] = `${getRandomArbitraryFloor(150, 600)}fr`;\r\n\r\n  document.documentElement.style.setProperty(\r\n    \"--gtc-animate3\",\r\n    clone3.join(\" \")\r\n  );\r\n\r\n  clone4[\r\n    getRandomArbitraryFloor(1, curGtcArr.length)\r\n  ] = `${getRandomArbitraryFloor(150, 600)}fr`;\r\n\r\n  document.documentElement.style.setProperty(\r\n    \"--gtc-animate4\",\r\n    clone4.join(\" \")\r\n  );\r\n\r\n  const winner = getRandomArbitraryFloor(1, 40);\r\n\r\n  clone5[winner] = \"4000fr\";\r\n\r\n  document.documentElement.style.setProperty(\r\n    \"--gtc-animate5\",\r\n    clone5.join(\" \")\r\n  );\r\n}\r\n\r\nconst colorArray = [\"#ff9aa2\", \"#b5ead7\", \"#fff5ba\", \"#afcbff\"];\r\n\r\nfunction randArray() {\r\n  const arr = [];\r\n  type arrObj = {\r\n    index: number;\r\n    color: string;\r\n  };\r\n  const colCount = 40;\r\n\r\n  for (let i = 0; i < colCount; i++) {\r\n    let curGtc = getComputedStyle(document.documentElement) //get the current value of the css variable\r\n      .getPropertyValue(\"--gtc-random\");\r\n\r\n    document.documentElement.style.setProperty(\r\n      \"--gtc-random\",\r\n      `${curGtc} ${getRandomArbitrary(5.0, 25.0)}fr` //each column takes up random fraction of the page\r\n    );\r\n\r\n    let curColor = \"\";\r\n\r\n    if (i < 10) {\r\n      curColor = colorArray[0];\r\n    } else if (i < 20) {\r\n      curColor = colorArray[1];\r\n    } else if (i < 30) {\r\n      curColor = colorArray[2];\r\n    } else if (i < 40) {\r\n      curColor = colorArray[3];\r\n    }\r\n\r\n    const spcArrObj = {\r\n      index: i,\r\n      color: curColor,\r\n    } as arrObj;\r\n\r\n    arr.push(spcArrObj);\r\n  }\r\n\r\n  return shuffle(arr);\r\n}\r\n\r\nlet colArray = randArray();\r\n\r\nfunction App() {\r\n  const [showTimer, setShowTimer] = useState(false);\r\n  const [showDice, setShowDice] = useState(true);\r\n\r\n  const roll = () => {\r\n    setupCSSAnimationVariables();\r\n    const colContainer = document.getElementById(\"col-container\")!;\r\n    colContainer!.classList.remove(\"animated\");\r\n    void colContainer?.offsetWidth;\r\n\r\n    document.getElementById(\"col-container\")!.classList.add(\"animated\");\r\n    showTimer === true ? setShowTimer(false) : setShowTimer(true);\r\n    setShowDice(false);\r\n  };\r\n\r\n  const showTime = () => {\r\n    return showTimer === true ? <TimerWrapper handleClick={roll} /> : null;\r\n  };\r\n\r\n  const diceTime = () => {\r\n    return showDice === true ? <Roll handleClick={roll} /> : null;\r\n  };\r\n\r\n  const onAnimationStart = () => {\r\n    setShowTimer(false);\r\n  };\r\n\r\n  const onAnimationEnd = () => {\r\n    setShowTimer(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Container\r\n        onAnimationStart={onAnimationStart}\r\n        onAnimationEnd={onAnimationEnd}\r\n        colArray={colArray}\r\n      ></Container>\r\n      {diceTime()}\r\n      {showTime()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}